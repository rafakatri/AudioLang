block = {statement};

statement = ('\n'|assignment|print|while|if|output|play|varDeclaration);

varDeclaration = ('source', identifier, (('=', expression)|)|'int', identifier, (('=', bool_exp)|));

assignment = identifier, '=', (bool_exp|expression), ';';

print = 'print', '(', bool_exp, ')', ';';

output = 'output', '(', identifier, ',', string, ')',';';

play = 'play', expression;

while = 'while', '(', bool_exp, ')', '{', {statement}, '}', ';';

if = 'if', '(', bool_exp, ')', '{', {statement}, '}', (|'else', '{', {statement}, '}'), ';';

bool_exp = bool_term, { ( 'or' ) , bool_term };

bool_term = rel_exp, { ( 'and' ) , rel_exp };

rel_exp = expression, { ( '==' | '>'|'<' ) , expression };

expression = term, { ( '+' | '-' ) , term };

term = { factor, ( '*' | '/' ) }, factor;

factor = number | string | identifier | ('+'| '-'|'not'), factor | ('(', expression, ')')| ('read', '(', ')')|identifier_operations ;

identifier = (letter | '_'), {letter | digit | '_'};

identifier_operations = identifier, {('from', expression, 'to', expression)| ('rcut', expression)| ('lcut', expression)| ('insert', identifier, 'at', expression)};

letter = 'a' | '...' | 'Z';

number = digit, { digit };

digit = '0' | '1' | '...' | '9';

string = '"', { character }, '"';

character = letter | digit | special_character;

special_character = '!' | '@' | '#' | '$' | '%' | '^' | '&' | '*' | '(' | ')' | '-' | '_' | '+' | '=' | '[' | ']' | '{' | '}' | '|' | ':' | ';' | '<' | ',' | '.' | '>' | '?' | '/' | '`' | '~';

